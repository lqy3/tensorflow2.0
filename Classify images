Fashion MNIST:70,000 grayscale images; 10 categories; clothing; low resolution (28 by 28 pixels).
60,000 images to train; 10,000 images to evaluate;
acess, immport, load the Fashion MNIST directly from TensorFlow.
    fashion_mnist = keras.datasets.fashion_mnist
   (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

images: 28x28 NumPy arrays, with pixel value ranging from 0 to 255.
labels: array of integers, ranging from 0 to 9. 0-Tshirt/top, 1-Trouser, 2-Pullover, 3-Dress, 4-Coat, 5-Sandal, 6-Shirt, 7-Sneaker, 8-Bag, 9-Ankele boot.
class names are not included with the dataset, store them here to use later when plotting the images:
   calss_name = ['T-shirt/top', 'Touser', ....]

Exploer the format of dataset before training the model.
  shape;length.

Prepocess the data
  inspect the first images in the training set
    plt.figurt()
    plt.imshow(train_images[])
    plt.colobar()
    plt.grid(False)
    plt.show()
 sclae theset values to a rang of 0 to 1 before feeding them to the neural betwork model.
    train_images = train_images / 255.0
    test_images = test_images / 255.0
 verify that the data is in correct format and that we're ready to build and train the netwoek,
 let's display the first 25 images from the training set and dispalyer the class name below each images.
    plt.figure(figsize=(10, 10))
    for i in rang (25):
      plt.subplot(5, 5, i+1)
      plt.xticks([])
      plt.yticks([])
      plt.grid(False)
      plt.imshow(train_images[i], cmap=plt.cm.binary)
      plt.xlabel(class_names[train_labesl[i])
    plt.show()
    
Build the model
  configure the layers; compiling;
  Set up the layers
    model = keras.Sequential([
    //transform teh format of the images from a two-dimesional array(of 28 by 28 pixels) to one-dimesional(of 28 * 28 = 784n pixels)
         keras.layers.Flatten(input_shape=(28,28)),
    //desely connected, or fully connected
         keras.layers.Dense(128, actiavation='relu'),
         keras.layers.Dense(10, activation='softmax')
    ])
  Compile the model
    Loss function; Optimizer; Metrics-Used to monitor the training and testing steps. the following examples uses accuracy, the fraction of the images that are correctly classified.
      model.compile(optimizer='adam',
                    loss='sparse_categorical_crossentropy',
                    metrics=['accuracy'])
 
 Train the model
   Feed the training data; The model learns to associate images and labels; make predictions about a test set.
   To start training, call the model.fit methond.
     model.fit(train_images, train_labels, epochs=10)
   Evaluate accuracy
     test_loss, test_acc = modek.evaluate(test_images, test_labels)
     print('\nTest accuracy:', test_acc)
   Predictions
     predictions = moedl.predict(test_images)
     predictions[0]
     //highest confidence value
     np.argmax(predictions[0])
     test_labels[0]
     //graph thist to look at the full set of 10 class predictions.
     def plot_image(i, predictions_array, true_labes, img):
       predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
       plt.grid(False)
       plt.xticks([])
       plt.yticks([])
       plt.imshow(img, cmap=plt.cm.binary)
       predicted_label = np.argmax(predictions_array)
       if predicted_label == true_label:
         color = 'blue'
        else
          color = 'red'
        plt.xlabel("{} {:2.0f}% ({}).format(class_names[Predicted_labes],
                                      100*np.max(predictions_array),
                                      class_names[true_label0),
                                      color=color)
      def plot_valuer_array(i, predictions_array, true_label):
        predictions_array, true_label = predictions_array[i], true_label[i]
        plt.grid(False)
        plt.xticks([])
        plt.yticks([])
        thisplot = plt.bar(rang(10), predictions_array, color="#77777")
        plt.ylim([0, 1])
        predicted_label = np.argmax(predictions_array)
        thisplot([predicted_label].set_color('red')
        thisplot[true_label].set_color('blue')
      look at 0th image, predictions, and prediction array.
        i = 0
        plt.figure(figsie=(6,3))
        plt.subplot(1,2,1)
        plot_image(i, predictions, test_label, test_images)
        plot.subplot(1,2,2)
        plot_value_array(i, predictions, test_labels)
        plt.show()
      plot several images with their predictions. Correct prediction labels are blue and incorrect prediction labels are red.
        num_rows = 5
        num_cols = 3
        num_images = num_row*num_cols
        plt.figure(figsize=(2*2*num_cols, 2*num_rows))
        for i in rang(num_images):
          plt.sunplot(num_rows, 2*num_cols, 2*i+1)
          plot_image(i, predictions, test_labels, test_images)
          plt.subplot(num_rows, 2*num_cols, 2*i+2)
          plot_value_array(i, pedictions, test_labels)
        plt.show()
      Finally, use the trained model to make a prediction abot a single image.
      #Grab an images from the test dataset.
        img = test_images[0]
        print(img.shape)
      #Add the image to a batch where it's the only member.
        img = (np.expand_dims(img,0))
        print(img.shape)
      predict the correct label for this image:
        predictions_single = model.predict(img)
        print(predictions_single)
        plot_value_array(0, pedictions_single, test_labels)
        - = plt.xticks(range(10), class_names, rotation=45)
        np.argmax(predictions_single[0])
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
